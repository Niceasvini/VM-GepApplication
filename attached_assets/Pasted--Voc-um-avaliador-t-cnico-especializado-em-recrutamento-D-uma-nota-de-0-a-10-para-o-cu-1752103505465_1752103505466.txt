 Voc√™ √© um avaliador t√©cnico especializado em recrutamento.

        D√™ uma nota de 0 a 10 para o curr√≠culo abaixo com base na vaga '{job_description.get("name")}', considerando:

        1. Experi√™ncia pr√°tica na √°rea (peso 4)
        2. Habilidades t√©cnicas relevantes (peso 3)
        3. Forma√ß√£o acad√™mica (peso 2)
        4. Clareza e estrutura do curr√≠culo (peso 1)

        - Considere a relev√¢ncia das experi√™ncias e habilidades em rela√ß√£o √† vaga.
        - Avalie a forma√ß√£o acad√™mica e se ela √© adequada para a posi√ß√£o.
        - Com base na soma ponderada desses crit√©rios, atribua uma *nota final com at√© duas casas decimais*, entre 0 e 10.
        - Retorne apenas a nota final, com at√© duas casas decimais (ex: 7.91 ou 6.25), sem coment√°rios ou explica√ß√µes.

        Exemplo:
        Nota: 6.87

        Curr√≠culo:
def resume_cv(self, cv_text: str) -> str:
        prompt = f"""
        Voc√™ √© um analista de curr√≠culos. Extraia informa√ß√µes do seguinte curr√≠culo em formato Markdown.
        
        ## Nome Completo
        [nome]

        ## Experi√™ncia Relevante
        - [Cargo] @ [Empresa] ([Ano-In√≠cio] - [Ano-Fim])
        - ...

        ## Habilidades T√©cnicas
        - Python, SQL, Power BI, etc.

        ## Forma√ß√£o Acad√™mica
        - Bacharelado em [Curso] @ [Institui√ß√£o]

        ## Idiomas
        - Ingl√™s (Avan√ßado), Espanhol (Intermedi√°rio)

        ### Conte√∫do:
        {cv_text[:5000]}
        """
        result = self.generate_response(prompt, temperature=0.3, max_tokens=5000)
        return result or "Curr√≠culo n√£o p√¥de ser resumido."

    def generate_score(self, cv_text: str, job_description: Dict) -> float:
        prompt = f"""
        Voc√™ √© um avaliador t√©cnico especializado em recrutamento.

        D√™ uma nota de 0 a 10 para o curr√≠culo abaixo com base na vaga '{job_description.get("name")}', considerando:

        1. Experi√™ncia pr√°tica na √°rea (peso 4)
        2. Habilidades t√©cnicas relevantes (peso 3)
        3. Forma√ß√£o acad√™mica (peso 2)
        4. Clareza e estrutura do curr√≠culo (peso 1)

        - Considere a relev√¢ncia das experi√™ncias e habilidades em rela√ß√£o √† vaga.
        - Avalie a forma√ß√£o acad√™mica e se ela √© adequada para a posi√ß√£o.
        - Com base na soma ponderada desses crit√©rios, atribua uma *nota final com at√© duas casas decimais*, entre 0 e 10.
        - Retorne apenas a nota final, com at√© duas casas decimais (ex: 7.91 ou 6.25), sem coment√°rios ou explica√ß√µes.

        Exemplo:
        Nota: 6.87

        Curr√≠culo:
        {cv_text[:5000]}
        """

        response = self.generate_response(prompt, temperature=0.85, max_tokens=150)
        print("Resposta da IA:", response)
        match = re.search(r"(\d{1,2}(?:\.\d{1,2})?)", response)
        if match:
            raw_score = float(match.group(1))
            return round(min(max(raw_score, 0), 10), 2)
        return None

    def generate_opinion(self, cv_text: str, job_description: Dict) -> str:
        prompt = f"""
        Avalie o curr√≠culo abaixo com base na vaga: {job_description.get("name")}

        1. Alinhamento T√©cnico (tecnologias e experi√™ncia)
        2. Gaps t√©cnicos
        3. Recomenda√ß√£o final: Sim / Parcial / N√£o

        Curr√≠culo:
        {cv_text[:5000]}
        """
        result = self.generate_response(prompt, temperature=0.5, max_tokens=5000)
        return result or "An√°lise indispon√≠vel."

    def analyze_cv(self, cv_text: str, job_description: Dict) -> Tuple[str, str, float]:
        prompt = f"""
        Voc√™ √© um analista de curr√≠culos. Analise o curr√≠culo abaixo para a vaga '{job_description.get("name")}'.
        
        Retorne:
        - Um resumo estruturado do curr√≠culo em Markdown.
        - Uma opini√£o cr√≠tica com base na vaga (alinhamento t√©cnico, gaps e recomenda√ß√£o).
        - Uma nota final de 0 a 10 (com uma casa decimal), baseada no alinhamento com a vaga.

        Use o seguinte formato:

        ### RESUMO
        (Resumo estruturado em Markdown)

        ### OPINI√ÉO
        1. Alinhamento T√©cnico: ...
        2. Gaps T√©cnicos: ...
        3. Recomenda√ß√£o Final: Sim / Parcial / N√£o

        ### SCORE
        (Apenas o n√∫mero com uma casa decimal)

        Curr√≠culo:
        {cv_text[:5000]}
        """
# üîÑ Processa arquivos em paralelo
        with concurrent.futures.ThreadPoolExecutor(max_workers=4) as executor:  # Reduzido para 4 workers
            futuros = {
                executor.submit(analisar_curriculo, f, i, total_arquivos, cache, f.name): f
                for i, f in enumerate(filtered_files, start=1)
            }