import json
import os
import logging
import time
import hashlib
from services.file_processor import extract_text_from_file
from services.cache_service import analysis_cache

# the newest OpenAI model is "gpt-4o" which was released May 13, 2024.
# do not change this unless explicitly requested by the user
from openai import OpenAI

DEEPSEEK_API_KEY = os.environ.get("DEEPSEEK_API_KEY")
if not DEEPSEEK_API_KEY:
    DEEPSEEK_API_KEY = os.environ.get("OPENAI_API_KEY")

# Configure OpenAI client for DeepSeek API
openai = OpenAI(
    api_key=DEEPSEEK_API_KEY,
    base_url="https://api.deepseek.com/v1"
)

def generate_score_only(cv_text, job):
    """
    Generate only the score for faster processing as a professional recruiter
    """
    prompt = f"""
Voc√™ √© um recrutador s√™nior especializado em avalia√ß√£o de candidatos.

Avalie o curr√≠culo abaixo para a vaga '{job.title}' e atribua uma nota de 0 a 10.

VAGA: {job.title}
DESCRI√á√ÉO: {job.description[:300] if job.description else 'N√£o especificado'}
REQUISITOS: {job.requirements[:500] if job.requirements else 'N√£o especificado'}

CRIT√âRIOS DE AVALIA√á√ÉO:
1. Experi√™ncia relevante na √°rea (peso 4)
2. Habilidades t√©cnicas que atendem aos requisitos (peso 3)
3. Forma√ß√£o acad√™mica adequada (peso 2)
4. Qualidade e clareza do curr√≠culo (peso 1)

CURR√çCULO:
{cv_text[:3000]}

INSTRU√á√ïES:
- Analise objetivamente a adequa√ß√£o do candidato √† vaga espec√≠fica
- Considere a relev√¢ncia das experi√™ncias em rela√ß√£o aos requisitos
- Avalie se as habilidades t√©cnicas atendem √†s necessidades da posi√ß√£o
- Atribua uma nota de 0 a 10 com at√© duas casas decimais
- Retorne apenas a nota final (ex: 7.91 ou 6.25), sem coment√°rios

Nota: [sua avalia√ß√£o]
"""
    
    try:
        response = openai.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=50,  # Increased slightly for better responses
            temperature=0.1,  # Lower temperature for faster, more consistent responses
            timeout=45  # 45 second timeout
        )
    except Exception as api_error:
        logging.error(f"Score API call failed: {api_error}")
        # Return a default score instead of failing
        return 5.0
    
    result = response.choices[0].message.content
    # Extract score using regex - more precise
    import re
    match = re.search(r"(\d{1,2}(?:\.\d{1,2})?)", result)
    if match:
        raw_score = float(match.group(1))
        # Ensure score is between 0 and 10 with proper scaling
        if raw_score > 10:
            raw_score = raw_score / 10  # Handle cases like 85/100
        return round(min(max(raw_score, 0), 10), 2)
    
    # If no score found, try to extract from different patterns
    if "excelente" in result.lower() or "muito bom" in result.lower():
        return 8.5
    elif "bom" in result.lower() or "adequado" in result.lower():
        return 7.0
    elif "regular" in result.lower() or "m√©dio" in result.lower():
        return 5.5
    elif "fraco" in result.lower() or "inadequado" in result.lower():
        return 3.0
    
    return 5.0

def generate_summary_and_analysis(cv_text, job):
    """
    Generate detailed summary and analysis in structured format as a professional recruiter
    """
    prompt = f"""
Voc√™ √© um recrutador s√™nior especializado em an√°lise de curr√≠culos. 

ANALISE APENAS O CURR√çCULO REAL FORNECIDO ABAIXO. N√ÉO INVENTE INFORMA√á√ïES.

VAGA: {job.title}
DESCRI√á√ÉO: {job.description[:500] if job.description else 'N√£o especificado'}
REQUISITOS: {job.requirements[:1000] if job.requirements else 'N√£o especificado'}

CURR√çCULO REAL DO CANDIDATO:
{cv_text[:4000]}

INSTRU√á√ïES OBRIGAT√ìRIAS:
1. Analise APENAS as informa√ß√µes reais do curr√≠culo fornecido
2. N√ÉO invente dados, empresas ou experi√™ncias
3. Se alguma informa√ß√£o n√£o estiver no curr√≠culo, escreva "N√£o informado"
4. Seja espec√≠fico sobre o candidato real
5. N√ÉO use exemplos hipot√©ticos como "Jo√£o Silva" ou "Empresa XYZ"
6. Analise o curr√≠culo REAL fornecido acima
7. SEMPRE extraia e coloque o NOME e INFORMA√á√ïES DE CONTATO como PRIMEIRAS informa√ß√µes
8. Formate o texto de forma PROFISSIONAL e ORGANIZADA
9. Use emojis e formata√ß√£o para melhor visualiza√ß√£o

FORNECE UMA AN√ÅLISE PROFISSIONAL NO SEGUINTE FORMATO EXATO:

RESUMO DO CURR√çCULO

üìã **INFORMA√á√ïES PESSOAIS**
Nome Completo: [nome real do candidato do curr√≠culo]

üìû **INFORMA√á√ïES DE CONTATO**
Email: [email real do candidato]
Telefone: [telefone real do candidato]
{f'Endere√ßo: [endere√ßo real]' if '[endere√ßo real]' in cv_text else ''}
{f'Data de Nascimento: [data real]' if '[data real]' in cv_text else ''}

üíº **EXPERI√äNCIA PROFISSIONAL**
‚Ä¢ [Cargo real] na [Empresa real] ([per√≠odo real com DATAS COMPLETAS])
‚Ä¢ [Cargo real] na [Empresa real] ([per√≠odo real com DATAS COMPLETAS])
‚Ä¢ [Cargo real] na [Empresa real] ([per√≠odo real com DATAS COMPLETAS)]

IMPORTANTE SOBRE INFORMA√á√ïES DE CONTATO:
- SEMPRE extraia o email e telefone do curr√≠culo
- Coloque essas informa√ß√µes logo ap√≥s o nome
- Formate de forma clara e organizada
- Se n√£o encontrar, indique "N√£o informado"

IMPORTANTE SOBRE DATAS:
- EXTRAIA TODAS as datas de experi√™ncia profissional do curr√≠culo
- Formate as datas de forma clara: DD/MM/AAAA - DD/MM/AAAA
- Se encontrar datas como "2021-2024", converta para formato completo
- Se n√£o encontrar datas espec√≠ficas, indique "Per√≠odo n√£o especificado"
- Para cada experi√™ncia, inclua: Cargo, Empresa, Per√≠odo e Responsabilidades

üîß **HABILIDADES T√âCNICAS**
[Habilidades reais identificadas no curr√≠culo]

üéì **FORMA√á√ÉO ACAD√äMICA**
[Forma√ß√£o real do candidato]

üåç **IDIOMAS**
[Idiomas reais do candidato, se informados]

üìä **AN√ÅLISE DO RECRUTADOR**

üéØ **1. ALINHAMENTO T√âCNICO**
‚Ä¢ Experi√™ncia relevante: [cargo espec√≠fico real] na [empresa real] ([per√≠odo real])
‚Ä¢ Compet√™ncias alinhadas: [liste 2-3 compet√™ncias reais que atendem aos requisitos da vaga]
‚Ä¢ Adequa√ß√£o √† vaga: [explique objetivamente como o perfil real se adequa √† posi√ß√£o]

‚ö†Ô∏è **2. GAPS IDENTIFICADOS**
‚Ä¢ Lacunas t√©cnicas: [liste 2-3 lacunas espec√≠ficas em rela√ß√£o aos requisitos da vaga]
‚Ä¢ Conhecimentos em falta: [conhecimentos espec√≠ficos que faltam baseado no curr√≠culo real]
‚Ä¢ √Åreas de desenvolvimento: [sugira 2-3 desenvolvimentos espec√≠ficos baseado no perfil real]

üèÜ **3. RECOMENDA√á√ÉO FINAL: [ADEQUADO/PARCIAL/INADEQUADO]**
‚Ä¢ Pontos fortes: [liste 2-3 pontos fortes espec√≠ficos do candidato real]
‚Ä¢ Limita√ß√µes: [liste 2-3 limita√ß√µes espec√≠ficas baseadas no curr√≠culo real]
‚Ä¢ Justificativa: [explique objetivamente por que √© ADEQUADO/PARCIAL/INADEQUADO para a vaga]

IMPORTANTE: 
- O RESUMO DO CURR√çCULO deve conter APENAS informa√ß√µes factuais do curr√≠culo
- A AN√ÅLISE DO RECRUTADOR deve conter APENAS a avalia√ß√£o profissional
- N√ÉO inclua an√°lise no resumo
- N√ÉO inclua resumo na an√°lise
- Use exatamente os t√≠tulos "RESUMO DO CURR√çCULO" e "AN√ÅLISE DO RECRUTADOR"
- SEMPRE comece com NOME e INFORMA√á√ïES DE CONTATO
- Use emojis e formata√ß√£o para melhor visualiza√ß√£o
- Mantenha o layout PROFISSIONAL e ORGANIZADO

IMPORTANTE:
- Analise APENAS as informa√ß√µes reais do curr√≠culo fornecido
- N√ÉO invente dados, empresas ou experi√™ncias
- Se alguma informa√ß√£o n√£o estiver no curr√≠culo, escreva "N√£o informado"
- Seja espec√≠fico sobre o candidato real
- N√ÉO use exemplos hipot√©ticos
- Avalie objetivamente a adequa√ß√£o √† vaga espec√≠fica
- Use linguagem clara e direta
- Evite frases gen√©ricas, seja espec√≠fico sobre o candidato real
- Se o curr√≠culo n√£o contiver informa√ß√µes suficientes, indique claramente
"""
    
    try:
        response = openai.chat.completions.create(
            model="deepseek-chat",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=1500,  # Increased for complete analysis
            temperature=0.2,  # Lower temperature for more consistent responses
            timeout=90  # 90 second timeout for better reliability
        )
    except Exception as api_error:
        logging.error(f"Analysis API call failed: {api_error}")
        # Return a basic analysis instead of failing completely
        return f"""
RESUMO DO CURR√çCULO

üìã **INFORMA√á√ïES PESSOAIS**
Nome Completo: {extracted_name or '[Nome n√£o identificado]'}

üìû **INFORMA√á√ïES DE CONTATO**
Email: {extracted_email or '[Email n√£o dispon√≠vel]'}
Telefone: {extracted_phone or '[Telefone n√£o dispon√≠vel]'}
{f'Endere√ßo: {extracted_address}' if extracted_address else ''}
{f'Data de Nascimento: {extracted_birth_date}' if extracted_birth_date else ''}

üíº **EXPERI√äNCIA PROFISSIONAL**
‚Ä¢ [Experi√™ncia n√£o detalhada no curr√≠culo]

üîß **HABILIDADES T√âCNICAS**
[Habilidades n√£o especificadas]

üéì **FORMA√á√ÉO ACAD√äMICA**
[Forma√ß√£o n√£o informada]

üåç **IDIOMAS**
[Idiomas n√£o informados]

üìä **AN√ÅLISE DO RECRUTADOR**

üéØ **1. ALINHAMENTO T√âCNICO**
‚Ä¢ Experi√™ncia relevante: [N√£o foi poss√≠vel analisar devido a erro t√©cnico]
‚Ä¢ Compet√™ncias alinhadas: [An√°lise n√£o dispon√≠vel]
‚Ä¢ Adequa√ß√£o √† vaga: [Avalia√ß√£o n√£o poss√≠vel]

‚ö†Ô∏è **2. GAPS IDENTIFICADOS**
‚Ä¢ Lacunas t√©cnicas: [N√£o foi poss√≠vel identificar]
‚Ä¢ Conhecimentos em falta: [An√°lise n√£o dispon√≠vel]
‚Ä¢ √Åreas de desenvolvimento: [N√£o especificado]

üèÜ **3. RECOMENDA√á√ÉO FINAL: PARCIAL**
‚Ä¢ Pontos fortes: [N√£o foi poss√≠vel identificar]
‚Ä¢ Limita√ß√µes: [An√°lise t√©cnica n√£o dispon√≠vel]
‚Ä¢ Justificativa: Erro t√©cnico na an√°lise. Recomenda-se reprocessar o curr√≠culo.
"""
    
    result = response.choices[0].message.content
    
    # Validate that we got a meaningful response
    if not result or len(result.strip()) < 100:
        logging.warning(f"API returned very short response: {len(result)} characters")
        return f"""
RESUMO DO CURR√çCULO

üìã **INFORMA√á√ïES PESSOAIS**
Nome Completo: [Nome n√£o identificado]

üìû **INFORMA√á√ïES DE CONTATO**
Email: [Email n√£o dispon√≠vel]
Telefone: [Telefone n√£o dispon√≠vel]

üíº **EXPERI√äNCIA PROFISSIONAL**
‚Ä¢ [Experi√™ncia n√£o detalhada]

üîß **HABILIDADES T√âCNICAS**
[Habilidades n√£o especificadas]

üéì **FORMA√á√ÉO ACAD√äMICA**
[Forma√ß√£o n√£o informada]

üåç **IDIOMAS**
[Idiomas n√£o informados]

üìä **AN√ÅLISE DO RECRUTADOR**

üéØ **1. ALINHAMENTO T√âCNICO**
‚Ä¢ Experi√™ncia relevante: [An√°lise n√£o dispon√≠vel]
‚Ä¢ Compet√™ncias alinhadas: [N√£o foi poss√≠vel identificar]
‚Ä¢ Adequa√ß√£o √† vaga: [Avalia√ß√£o n√£o poss√≠vel]

‚ö†Ô∏è **2. GAPS IDENTIFICADOS**
‚Ä¢ Lacunas t√©cnicas: [N√£o foi poss√≠vel identificar]
‚Ä¢ Conhecimentos em falta: [An√°lise n√£o dispon√≠vel]
‚Ä¢ √Åreas de desenvolvimento: [N√£o especificado]

üèÜ **3. RECOMENDA√á√ÉO FINAL: PARCIAL**
‚Ä¢ Pontos fortes: [N√£o foi poss√≠vel identificar]
‚Ä¢ Limita√ß√µes: [An√°lise t√©cnica n√£o dispon√≠vel]
‚Ä¢ Justificativa: Resposta da API muito curta. Recomenda-se reprocessar o curr√≠culo.
"""
    
    return result

def analyze_resume(file_path, file_type, job):
    """
    Fast optimized resume analysis with parallel processing
    Returns a dictionary with score, summary, analysis, and skills
    """
    try:
        # Extract text from the resume
        resume_text = extract_text_from_file(file_path, file_type)
        
        # Log the extracted text for debugging
        logging.info(f"Extracted text length: {len(resume_text)}")
        logging.info(f"First 500 characters: {resume_text[:500]}")
        
        if not resume_text or len(resume_text.strip()) < 50:
            logging.error(f"Resume text is too short or empty: {len(resume_text)} characters")
            return {
                'score': 0.0,
                'summary': 'Erro: N√£o foi poss√≠vel extrair texto do curr√≠culo',
                'analysis': 'FALHA NA AN√ÅLISE: O arquivo n√£o cont√©m texto leg√≠vel ou est√° corrompido.',
                'skills': [],
                'experience_years': 0,
                'education_level': 'N√£o informado',
                'match_reasons': [],
                'recommendations': []
            }
        
        # Extract basic information first
        from services.file_processor import extract_name, extract_email, extract_phone, extract_address, extract_birth_date
        
        extracted_name = extract_name(resume_text)
        extracted_email = extract_email(resume_text)
        extracted_phone = extract_phone(resume_text)
        extracted_address = extract_address(resume_text)
        extracted_birth_date = extract_birth_date(resume_text)
        
        # Check cache first to avoid redundant API calls
        cached_result = analysis_cache.get_cached_analysis(resume_text, job.id)
        if cached_result:
            return cached_result
        
        # Check if API key is available
        if not DEEPSEEK_API_KEY:
            logging.error("DeepSeek API key not found")
            raise Exception("API key not configured")
        
        # Limit resume text to avoid token limits (increased for better analysis)
        if len(resume_text) > 4000:
            resume_text = resume_text[:4000] + "..."
        
        # Verify that we have meaningful text
        if not resume_text or len(resume_text.strip()) < 100:
            logging.error(f"Resume text is too short for analysis: {len(resume_text)} characters")
            return {
                'score': 0.0,
                'summary': 'Erro: Curr√≠culo n√£o cont√©m texto suficiente para an√°lise',
                'analysis': 'FALHA NA AN√ÅLISE: O arquivo n√£o cont√©m texto suficiente para an√°lise. Verifique se o arquivo est√° leg√≠vel.',
                'skills': [],
                'experience_years': 0,
                'education_level': 'N√£o informado',
                'match_reasons': [],
                'recommendations': []
            }
        
        # Step 1: Generate score quickly (most important)
        try:
            score = generate_score_only(resume_text, job)
        except Exception as score_error:
            logging.error(f"Error generating score: {score_error}")
            score = 5.0  # Default score
        
        # Step 2: Generate summary and analysis (optimized)
        try:
            full_analysis = generate_summary_and_analysis(resume_text, job)
        except Exception as analysis_error:
            logging.error(f"Error generating analysis: {analysis_error}")
            full_analysis = "An√°lise n√£o dispon√≠vel devido a erro t√©cnico."
        
        # Step 3: Process analysis and separate summary from detailed analysis
        executive_summary = ""
        detailed_analysis = ""
        
        if full_analysis:
            # Try to separate summary from detailed analysis
            if "RESUMO DO CURR√çCULO" in full_analysis and "AN√ÅLISE DO RECRUTADOR" in full_analysis:
                parts = full_analysis.split("AN√ÅLISE DO RECRUTADOR")
                if len(parts) >= 2:
                    # Extract summary (remove the "RESUMO DO CURR√çCULO" header)
                    summary_part = parts[0].replace("RESUMO DO CURR√çCULO", "").strip()
                    if summary_part:
                        executive_summary = summary_part
                    # Keep only the detailed analysis
                    detailed_analysis = parts[1].strip()
                else:
                    executive_summary = full_analysis
                    detailed_analysis = ""
            elif "RESUMO EXECUTIVO" in full_analysis and "AN√ÅLISE DO RECRUTADOR" in full_analysis:
                # Handle old format
                parts = full_analysis.split("AN√ÅLISE DO RECRUTADOR")
                if len(parts) >= 2:
                    summary_part = parts[0].replace("RESUMO EXECUTIVO", "").strip()
                    if summary_part:
                        executive_summary = summary_part
                    detailed_analysis = parts[1].strip()
                else:
                    executive_summary = full_analysis
                    detailed_analysis = ""
            else:
                # If format is not as expected, use the full analysis as summary only
                executive_summary = full_analysis
                detailed_analysis = ""
        
        # Clean up any remaining separators and analysis content from summary
        if executive_summary:
            executive_summary = executive_summary.replace("---", "").strip()
            # Remove any analysis content that might have leaked into summary
            analysis_indicators = [
                "AN√ÅLISE DO RECRUTADOR", "1. ALINHAMENTO T√âCNICO", "2. GAPS IDENTIFICADOS", 
                "3. RECOMENDA√á√ÉO FINAL", "OBSERVA√á√ÉO FINAL", "Pontos fortes:", "Limita√ß√µes:", 
                "Justificativa:", "Lacunas t√©cnicas:", "Conhecimentos em falta:", 
                "√Åreas de desenvolvimento:", "Compet√™ncias alinhadas:", "Adequa√ß√£o √† vaga:", 
                "Experi√™ncia relevante:", "PARCIAL", "ADEQUADO", "INADEQUADO"
            ]
            for indicator in analysis_indicators:
                if indicator in executive_summary:
                    executive_summary = executive_summary.split(indicator)[0].strip()
        
        if detailed_analysis:
            detailed_analysis = detailed_analysis.replace("---", "").strip()
        
        # Extract skills quickly
        skills = extract_skills_from_text(resume_text)
        
        # Validate analysis completeness with more tolerance
        has_score = score is not None and score > 0
        has_summary = executive_summary and len(executive_summary.strip()) > 30
        has_analysis = detailed_analysis and len(detailed_analysis.strip()) > 50
        
        # More flexible validation - if we have at least score and some content, consider it valid
        is_analysis_complete = has_score and (has_summary or has_analysis)
        
        if not is_analysis_complete:
            logging.warning(f"Incomplete analysis detected for candidate. Score: {score}, Summary length: {len(executive_summary)}, Analysis length: {len(detailed_analysis)}")
            
            # Try to provide partial results if possible
            if has_score:
                return {
                    'score': score,
                    'summary': executive_summary if has_summary else 'An√°lise parcial - Resumo n√£o dispon√≠vel',
                    'analysis': detailed_analysis if has_analysis else 'An√°lise parcial - Detalhes n√£o dispon√≠veis. Recomenda-se reprocessar para an√°lise completa.',
                    'skills': skills,
                    'experience_years': 1,
                    'education_level': 'N√£o informado',
                    'match_reasons': [f"Score: {score}/10"],
                    'recommendations': ['Recomenda-se reprocessar para an√°lise completa']
                }
            else:
                return {
                    'score': 0.0,
                    'summary': 'An√°lise incompleta - Falha na gera√ß√£o do resumo',
                    'analysis': 'FALHA NA AN√ÅLISE: A an√°lise foi marcada como conclu√≠da mas n√£o gerou conte√∫do completo. Poss√≠veis causas: erro na API, timeout, ou texto insuficiente.',
                    'skills': [],
                    'experience_years': 0,
                    'education_level': 'N√£o informado',
                    'match_reasons': [],
                    'recommendations': ['Recomenda-se reprocessar o curr√≠culo']
                }
        
        # Create result
        analysis_result = {
            'score': score,
            'summary': executive_summary,
            'analysis': detailed_analysis,
            'skills': skills,
            'experience_years': 1,  # Default for speed
            'education_level': 'N√£o informado',
            'match_reasons': [f"Score: {score}/10"],
            'recommendations': ["Avalia√ß√£o baseada em experi√™ncia e habilidades t√©cnicas"]
        }
        
        # Cache the result for future use
        analysis_cache.cache_analysis(resume_text, job.id, analysis_result)
        
        return analysis_result
        
    except Exception as e:
        # Quick error handling
        error_description = str(e)
        logging.error(f"Error in fast analysis: {error_description}")
        
        return {
            'score': 0.0,
            'summary': 'Erro na an√°lise do curr√≠culo',
            'analysis': f'FALHA NA AN√ÅLISE: {error_description}',
            'skills': [],
            'experience_years': 0,
            'education_level': 'N√£o informado',
            'match_reasons': [],
            'recommendations': []
        }

def extract_skills_from_text(text):
    """
    Extract skills from resume text using keyword matching
    """
    skills_keywords = [
        'python', 'java', 'javascript', 'react', 'angular', 'vue', 'node.js',
        'sql', 'mysql', 'postgresql', 'mongodb', 'redis', 'docker', 'kubernetes',
        'aws', 'azure', 'gcp', 'flask', 'django', 'spring', 'laravel',
        'git', 'github', 'gitlab', 'jenkins', 'ci/cd', 'agile', 'scrum',
        'html', 'css', 'bootstrap', 'tailwind', 'rest', 'api', 'graphql',
        'machine learning', 'data science', 'pandas', 'numpy', 'tensorflow',
        'pytorch', 'power bi', 'tableau', 'excel', 'word', 'powerpoint'
    ]
    
    found_skills = []
    text_lower = text.lower()
    
    for skill in skills_keywords:
        if skill in text_lower:
            found_skills.append(skill.title())
    
    return found_skills[:10]  # Return top 10 skills

def estimate_experience_years(text):
    """
    Estimate years of experience from resume text
    """
    import re
    
    # Look for patterns like "5 anos", "3 years", "2+ anos"
    patterns = [
        r'(\d+)\s*(?:anos?|years?)',
        r'(\d+)\+\s*(?:anos?|years?)',
        r'(?:h√°|for)\s*(\d+)\s*(?:anos?|years?)'
    ]
    
    years = []
    for pattern in patterns:
        matches = re.findall(pattern, text.lower())
        for match in matches:
            years.append(int(match))
    
    return max(years) if years else 1

def determine_education_level(text):
    """
    Determine education level from resume text
    """
    text_lower = text.lower()
    
    if any(word in text_lower for word in ['doutorado', 'phd', 'doutor']):
        return 'Doutorado'
    elif any(word in text_lower for word in ['mestrado', 'master', 'mestre']):
        return 'Mestrado'
    elif any(word in text_lower for word in ['bacharelado', 'bacharel', 'gradua√ß√£o', 'superior']):
        return 'Superior'
    elif any(word in text_lower for word in ['t√©cnico', 'tecn√≥logo']):
        return 'T√©cnico'
    else:
        return 'N√£o informado'

def get_detailed_error_description(error, file_path):
    """
    Generate detailed error description based on error type
    """
    error_type = type(error).__name__
    error_msg = str(error)
    
    # File-related errors
    if "No such file or directory" in error_msg:
        return f"Arquivo n√£o encontrado: {file_path} - O arquivo foi removido ou movido durante o processamento."
    
    # Permission errors
    if "Permission denied" in error_msg:
        return f"Erro de permiss√£o: N√£o foi poss√≠vel acessar o arquivo {file_path}. Verifique as permiss√µes do arquivo."
    
    # OpenAI/API errors
    if "OpenAI" in error_type or "API" in error_type:
        if "timeout" in error_msg.lower():
            return f"Timeout na API: A an√°lise demorou muito para responder. Isso pode ocorrer quando o servi√ßo de IA est√° sobrecarregado."
        elif "rate limit" in error_msg.lower():
            return f"Limite de taxa excedido: Muitas requisi√ß√µes √† API. Aguarde alguns minutos antes de tentar novamente."
        elif "invalid" in error_msg.lower():
            return f"Erro de API: Chave de API inv√°lida ou problema na configura√ß√£o do servi√ßo de IA."
        elif "connection" in error_msg.lower():
            return f"Erro de conex√£o: N√£o foi poss√≠vel conectar ao servi√ßo de IA. Verifique a conex√£o com a internet."
        else:
            return f"Erro na API de IA: {error_msg}"
    
    # Database errors
    if "database" in error_msg.lower() or "sql" in error_msg.lower():
        return f"Erro de banco de dados: {error_msg} - Problema ao salvar ou recuperar dados do candidato."
    
    # Text extraction errors
    if "extract" in error_msg.lower() or "decode" in error_msg.lower():
        return f"Erro na extra√ß√£o de texto: N√£o foi poss√≠vel extrair o conte√∫do do arquivo {file_path}. O arquivo pode estar corrompido ou em formato n√£o suportado."
    
    # Memory/processing errors
    if "memory" in error_msg.lower() or "out of" in error_msg.lower():
        return f"Erro de mem√≥ria: O arquivo {file_path} √© muito grande ou complexo para processamento."
    
    # Network errors
    if "network" in error_msg.lower() or "dns" in error_msg.lower():
        return f"Erro de rede: Problema de conectividade. Verifique a conex√£o com a internet."
    
    # Generic errors
    return f"Erro inesperado ({error_type}): {error_msg}"

def generate_batch_analysis_report(candidates):
    """
    Generate a comprehensive report for multiple candidates
    """
    try:
        candidates_data = []
        for candidate in candidates:
            candidates_data.append({
                'name': candidate.name,
                'score': candidate.ai_score,
                'summary': candidate.ai_summary,
                'skills': candidate.get_skills_list(),
                'status': candidate.status
            })
        
        prompt = f"""
        Analise os seguintes candidatos e gere um relat√≥rio executivo de recrutamento:
        
        CANDIDATOS:
        {json.dumps(candidates_data, indent=2, ensure_ascii=False)}
        
        Forne√ßa um relat√≥rio no formato JSON com:
        {{
            "executive_summary": "[resumo executivo dos candidatos]",
            "top_candidates": ["lista", "dos", "3", "melhores", "candidatos"],
            "skills_analysis": "[an√°lise das habilidades mais comuns]",
            "recommendations": ["recomenda√ß√µes", "para", "o", "processo", "seletivo"],
            "score_distribution": "[an√°lise da distribui√ß√£o de pontua√ß√µes]"
        }}
        """
        
        response = openai.chat.completions.create(
            model="deepseek-chat",
            messages=[
                {
                    "role": "system",
                    "content": "Voc√™ √© um consultor s√™nior de RH especializado em an√°lise de candidatos."
                },
                {"role": "user", "content": prompt}
            ],
            response_format={"type": "json_object"},
            max_tokens=1500,
            temperature=0.3
        )
        
        return json.loads(response.choices[0].message.content)
        
    except Exception as e:
        logging.error(f"Error generating batch analysis: {e}")
        return {
            'executive_summary': 'Erro na gera√ß√£o do relat√≥rio',
            'top_candidates': [],
            'skills_analysis': 'An√°lise n√£o dispon√≠vel',
            'recommendations': [],
            'score_distribution': 'Distribui√ß√£o n√£o dispon√≠vel'
        }
